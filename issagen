#!/bin/bash
set -u
readonly ISGN_THIS_FILE_NAME="${0##*/}"
readonly ISGN_THIS_DIR="$PWD"
readonly ISGN_FONT=${ISGN_FONT:-Helvetica}
readonly ISGN_IMG_SOURCE=${ISGN_IMG_SOURCE:-https://img.gifmagazine.net/gifmagazine/images/2122213/original.gif}
readonly ISGN_TMPDIR="${TMPDIR:-/tmp}"
ISGN_SILENT=0
ISGN_UNAME=$(uname | grep -oiE '(Darwin|Linux)')

trap 'rm -f "${ISGN_TMPDIR}"/isgn_* "${ISGN_TMPDIR}"/issagen.gif' EXIT

isgn_error_exit () {
  local _status="$1" ;shift
  local _msg="$1"
  echo "issagen:Error:${_msg}" >&2
  exit "$_status"
}

isgn_info () {
  local _msg="$1"
  echo "issagen:Info:${_msg}" >&2
}

isgn_img_get () {
  local _url="$1" ;shift
  local _file="$1"
  if type curl &> /dev/null ;then
    curl -s "$_url" > "$_file"
  elif type wget &> /dev/null ;then
    wget "$_url" -O "$_file"
  else
    isgn_error_exit 1 "curl or wget is required"
  fi
}

if [[ $ISGN_UNAME == 'Darwin' ]]; then
  ## For macOS
  isgn_open () {
    open -a "Safari" "$1"
  }

elif [[ $ISGN_UNAME == 'Linux' ]]; then
  ## For Linux
  isgn_open () {
    type xdg-open &>/dev/null && { xdg-open "$1"; return; }
    type eog &>/dev/null && { eog -f "$1"; return; }
    type gnome-open &>/dev/null && { gnome-open "$1"; return; }
    type firefox &>/dev/null && { firefox "$1"; return; }
    isgn_error_exit 1 "Image viewer is not found"
  }
fi

isgn_envcheck () {
  local _cmds="$1"
  while read -r cmd ; do
    if ! type "${cmd}" > /dev/null 2>&1; then
      isgn_error_exit 1 "${cmd} is required."
    fi
  done < <(echo "${_cmds}" | tr ' ' '\n')
}

isgn_usage() {
  cat << _EOS_
Usage:
  ${ISGN_THIS_FILE_NAME} [OPTIONS] [message]

Description:
  Issa Generator.
  Generate issagen.gif on the current directory.

OPTIONS:
  -h,--help   Show this screen.
  -f          Specify font name (i.e, Arial, Times) or path of ttc/ttf file.
  -s          Silent mode (Do not open image viewer).
_EOS_
}

isgn_parse_options() {
  if (( $# == 1 )) ;then
    isgn_usage
    isgn_error_exit 1 "No arguments are given."
  fi
  while (( $# > 0 ))
  do
    case "$1" in
      --help|-h)
        isgn_usage
        exit 0
        ;;
      -f)
        shift
        ISGN_FONT="$1"
        shift
        ;;
      -s)
        ISGN_SILENT=1
        shift
        ;;
      *)
        ISGN_MSG="$1"
        shift
        ;;
    esac
  done
}

main () {
  isgn_envcheck "convert yes"
  isgn_parse_options "$@"
  cd "${ISGN_TMPDIR}" || isgn_error_exit 1 "Failed to move to temporary directory"
  isgn_info "Download original gif image ..."
  isgn_img_get "${ISGN_IMG_SOURCE}" "isgn_original.gif"
  isgn_info "Converting gif image ..."
  convert -coalesce isgn_original.gif isgn_before%02d.png
  rm isgn_before{24..57}.png
  ## shuf -er "#"{FF,00}{FF,00}{FF,00} is simpler than it but macOS may not have shuf.
  yes "$(echo "#"{FF,00}{FF,00}{FF,00})" \
    | awk 'BEGIN {srand('$RANDOM')} {print $int(rand()*NF+1)}' \
    | awk '{printf "%02d %s\n", NR-1, $0}' \
    | head -n 24 \
    | xargs -n 2 sh -c "convert -font '${ISGN_FONT}' -alpha on -fill 'rgba(0, 0, 0, 0.0)' -stroke \"\$2\" -pointsize 48 -gravity South +antialias -annotate +0+32 '${ISGN_MSG}' \"isgn_before\$1.png\" \"isgn_after\$1.png\"" -
  convert -delay 0 -loop 0 isgn_after??.png issagen.gif
  isgn_info "Removing temporary files ..."
  rm isgn_before??.png isgn_after??.png isgn_original.gif
  mv issagen.gif "${ISGN_THIS_DIR}"

  isgn_info "issagen.gif is successfully generated!" >&2
  if (( ISGN_SILENT == 0 )) ;then
    isgn_open "${ISGN_THIS_DIR}/issagen.gif"
  fi
}

main "${1+"$@"}"
